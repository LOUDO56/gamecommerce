generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Platform {
  PS4
  PS5
  XBOX_ONE
  XBOX_SERIES_X_S
  PC
  NINTENDO_SWITCH
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @map("username")
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  orders        Order[]
  cart          Cart?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String      @unique
  description String
  price       Float
  platform    Platform[]
  imageUrl    String
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
  CartItem    CartItem[]
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  items       OrderItem[]
  totalAmount Float
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  gameId   String @db.ObjectId
  quantity Int
  price    Float

  game    Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @db.ObjectId
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  gameId   String @db.ObjectId
  quantity Int

  game   Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  Cart   Cart?   @relation(fields: [cartId], references: [id])
  cartId String? @db.ObjectId
}
